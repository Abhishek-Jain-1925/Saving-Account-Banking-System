// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/Abhishek-Jain-1925/Saving-Account-Banking-System/app/dto"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: tknStr
func (_m *Service) Authenticate(tknStr string) (int, string, error) {
	ret := _m.Called(tknStr)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 int
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (int, string, error)); ok {
		return rf(tknStr)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(tknStr)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(tknStr)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(tknStr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateLogin provides a mock function with given fields: ctx, req
func (_m *Service) CreateLogin(ctx context.Context, req dto.CreateLoginRequest) (string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateLogin")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateLoginRequest) (string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateLoginRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateLoginRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSignup provides a mock function with given fields: ctx, req
func (_m *Service) CreateSignup(ctx context.Context, req dto.CreateUser) (dto.Response, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateSignup")
	}

	var r0 dto.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateUser) (dto.Response, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateUser) dto.Response); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.Response)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateUser) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, req, user_id
func (_m *Service) UpdateUser(ctx context.Context, req dto.UpdateUser, user_id int) (dto.UpdateUser, error) {
	ret := _m.Called(ctx, req, user_id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 dto.UpdateUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateUser, int) (dto.UpdateUser, error)); ok {
		return rf(ctx, req, user_id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateUser, int) dto.UpdateUser); ok {
		r0 = rf(ctx, req, user_id)
	} else {
		r0 = ret.Get(0).(dto.UpdateUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.UpdateUser, int) error); ok {
		r1 = rf(ctx, req, user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
