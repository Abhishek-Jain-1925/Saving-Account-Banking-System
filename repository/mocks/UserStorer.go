// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/Abhishek-Jain-1925/Saving-Account-Banking-System/app/dto"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// UserStorer is an autogenerated mock type for the UserStorer type
type UserStorer struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: req
func (_m *UserStorer) AddUser(req dto.CreateUser) (dto.Response, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 dto.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.CreateUser) (dto.Response, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(dto.CreateUser) dto.Response); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(dto.Response)
	}

	if rf, ok := ret.Get(1).(func(dto.CreateUser) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeginTx provides a mock function with given fields: ctx
func (_m *UserStorer) BeginTx(ctx context.Context) (*sql.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sql.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sql.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitTx provides a mock function with given fields: tx
func (_m *UserStorer) CommitTx(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for CommitTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConn provides a mock function with given fields:
func (_m *UserStorer) GetConn() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConn")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// GetLoginDetails provides a mock function with given fields:
func (_m *UserStorer) GetLoginDetails() (map[string]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLoginDetails")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func() (map[string]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleTransaction provides a mock function with given fields: ctx, tx, incomingErr
func (_m *UserStorer) HandleTransaction(ctx context.Context, tx *sql.Tx, incomingErr error) error {
	ret := _m.Called(ctx, tx, incomingErr)

	if len(ret) == 0 {
		panic("no return value specified for HandleTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, error) error); ok {
		r0 = rf(ctx, tx, incomingErr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackTx provides a mock function with given fields: tx
func (_m *UserStorer) RollbackTx(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for RollbackTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenDetails provides a mock function with given fields: email
func (_m *UserStorer) TokenDetails(email string) (int, string, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for TokenDetails")
	}

	var r0 int
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (int, string, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateUser provides a mock function with given fields: req, user_id
func (_m *UserStorer) UpdateUser(req dto.UpdateUser, user_id int) (dto.UpdateUser, error) {
	ret := _m.Called(req, user_id)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 dto.UpdateUser
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.UpdateUser, int) (dto.UpdateUser, error)); ok {
		return rf(req, user_id)
	}
	if rf, ok := ret.Get(0).(func(dto.UpdateUser, int) dto.UpdateUser); ok {
		r0 = rf(req, user_id)
	} else {
		r0 = ret.Get(0).(dto.UpdateUser)
	}

	if rf, ok := ret.Get(1).(func(dto.UpdateUser, int) error); ok {
		r1 = rf(req, user_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// initiateQueryExecutor provides a mock function with given fields: tx
func (_m *UserStorer) initiateQueryExecutor(tx *sql.DB) *sql.DB {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for initiateQueryExecutor")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func(*sql.DB) *sql.DB); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// NewUserStorer creates a new instance of UserStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserStorer {
	mock := &UserStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
